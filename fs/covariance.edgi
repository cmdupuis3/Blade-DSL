
#include <cmath>
#include <iostream>
using std::cout;
using std::endl;
#include <netcdf.h>

#include "nested_array_utilities.cpp"
using namespace nested_array_utilities;

#define OMP_NUM_THREADS 48

#pragma edgi function(covariance) arity(2) input(in1, in2) iranks(1,1) output(out) otype(float) orank(0) ompLevels(1,0)
{
    int len = 5;
    float mean1 = 0;
    float mean2 = 0;
    for (int i = 0; i < len; i++) {
        mean1 += in1[i];
    }
    mean1 /= len;

    for (int j = 0; j < len; j++) {
        mean2 += in2[j];
    }
    mean2 /= len;

    for (int i = 0; i < len; i++) {
        for (int j = 0; j < len; j++) {
            out += (in1[i] - mean1) * (in2[j] - mean2);
        }
    }
    out /= len;
}

static constexpr const int extents3[3] = {400,400,400};
static constexpr const int extents4[4] = {400,400,400,400};

int main() {

    time_t start;
    time(&start);

    #pragma edgi array
    edgi_nc_t a1("/home/username/Data/indonesia/hqp_block11.nc", "hqp");

    #pragma edgi array
    edgi_nc_t a2("/home/username/Data/indonesia/hqp_block12.nc", "hqp");

    cout << "Allocation took " << (time(NULL) - start) << "s" << endl << endl;

    typedef promote<float, 3>::type float3;
    typedef promote<float, 4>::type float4;

    fill_random<float3, extents3>(a2, 10);

    time(&start);
    auto oloop = object_for(covariance);
    res = oloop(a1, a2)("/home/username/Data/indonesia/new.nc", "hqpCovariance");

    cout << "Calculation took " << (time(NULL) - start) << "s" << endl << endl;
/*
    for (int k = 0; k < 5; k++){
        for (int l = 0; l < 5; l++){
            cout << res[k][l] << "\t";
        }
        cout << endl;
    }
*/
    return 0;
}

