
#include <cmath>
#include <iostream>
using std::cout;
using std::endl;

#include "nested_array_utilities.cpp"
using namespace nested_array_utilities;


#pragma edgi function(func) arity(3) input(in1, in2, in3) iranks(0,0,0) output(out) orank(0) ompLevels(1,1,0)
{
    out = (in1 + in2) * in3;
}


static constexpr const int extents[4] = {5,5,5,5};


int main() {
	srand(time(NULL));

    #pragma edgi array symmetry(1,1,1,2)
    float~4 a1;

    #pragma edgi array
    float~4 a2;

    #pragma edgi array
    float~4 a3;

    #pragma edgi array symmetry(1,1,1,2)
    float~4 res;

    typedef promote<float, 4>::type float4;

    a1  = allocate<float4, extents, a1_symm>();
    a2  = allocate<float4, extents>();
    a3  = allocate<float4, extents>();
    res = allocate<float4, extents, res_symm>();

    fill_random<float4, extents, a1_symm>(a1, 10);
    fill_random<float4, extents>(a2, 10);
    fill_random<float4, extents>(a3, 10);

    auto oloop = object_for(func);
    oloop(a1, a2, a3, res, extents, extents, extents, extents);


    for (int i = 0; i < 5; i++){
        for (int j = 0; j < 5; j++){
            for (int k = 0; k < 5; k++){
                cout << a1[i][j][k][0] << " ";
            }
            cout << "   ";
            for (int k = 0; k < 5; k++){
                cout << a2[i][j][k][0] << " ";
            }
            cout << "   ";
            for (int k = 0; k < 5; k++){
                cout << a3[i][j][k][0] << " ";
            }
            cout << "   ";
            for (int k = 0; k < 5; k++){
                cout << res[i][j][k][0] << " ";
            }
            cout << endl;
        }
        cout << endl << endl;
    }

    return 0;
}

