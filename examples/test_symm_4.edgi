
#include <cmath>
#include <iostream>
using std::cout;
using std::endl;
#include <chrono>

#define TIME std::chrono::high_resolution_clock::now()
#define TIME_DIFF std::chrono::duration_cast<std::chrono::nanoseconds>(end - start).count()

#include "nested_array_utilities.cpp"
using namespace nested_array_utilities;

#define OMP_NUM_THREADS 10

#pragma edgi function(add10) arity(1) input(in1) iranks(0) output(out) otype(float) orank(0) ompLevels(2)
{
    out = in1 + 10;
}


static constexpr const size_t extents7[7] = {10,10,10,10,10,10,5000};

int main() {

    auto start = TIME;

    #pragma edgi array symmetry(1,1,1,1,5,6,7)
    float^7 a1(extents7);

    auto end = TIME;
    double diff = 1e-9 * TIME_DIFF;
    cout << "Input Allocation took " << diff << "s" << endl << endl;

    typedef promote<float, 7>::type float7;

    start = TIME;
    fill_random<float7, a1_symm>(a1, extents7, 7);
    end = TIME;
    diff = 1e-9 * TIME_DIFF;
    cout << "Random fill took " << diff << "s" << endl << endl;

    start = TIME;
    auto oloop = object_for(add10);
    res = oloop(a1)(extents7);
    end = TIME;
    diff = 1e-9 * TIME_DIFF;

    cout << "Calculation took " << diff << "s" << endl << endl;
    
    return 0;
}
